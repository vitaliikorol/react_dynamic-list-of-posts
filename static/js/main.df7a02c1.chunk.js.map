{"version":3,"sources":["helpers/api.ts","helpers/postList.tsx","loading-spinner.tsx","helpers/button.tsx","App.tsx","index.tsx"],"names":["getData","url","fetch","then","response","json","PostList","setQuery","query","sortedPosts","className","type","onChange","event","target","value","placeholder","map","newPost","key","id","title","body","user","name","email","address","city","street","zipcode","comments","comment","String","LoadingSpinner","Button","isLoading","handleLoad","errorMessage","disabled","onClick","App","useState","postsList","setPostList","setIsLoading","isLoaded","setIsLoaded","setErrorMessage","a","postsFromServer","usersFromServer","commentsFromServer","allPosts","find","userId","filter","postId","useMemo","qry","el","toLocaleLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df7a02c1.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user?: User;\n  comments?: Comment[];\n}\n\nexport interface UserAddress {\n  city: string;\n  street: string;\n  zipcode: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: UserAddress;\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  body: string;\n  email: string;\n}\n\nconst getData = <T>(url: string): Promise<T[]> => (\n  fetch(API_URL + url).then(response => response.json())\n);\n\nexport const getPosts = () => getData<Post>('/posts.json');\nexport const getComments = () => getData<Comment>('/comments.json');\nexport const getUsers = () => getData<User>('/users.json');\n","import React from 'react';\nimport { Post } from './api';\n\n\ntype Props = {\n  setQuery: (arg0: string) => void;\n  query: string;\n  sortedPosts: Post[];\n};\n\nexport const PostList: React.FC<Props> = ({ setQuery, query, sortedPosts }) => {\n  return (\n    <>\n      <input\n        className=\"searchbar\"\n        type=\"text\"\n        onChange={(event) => setQuery(event.target.value)}\n        placeholder=\"Search\"\n        value={query}\n      />\n      <ul>\n        {sortedPosts.map((newPost: Post) => (\n          <li key={newPost.id} className=\"post\">\n            <div className=\"post__title\">{newPost.title}</div>\n            <div className=\"post__body\">{newPost.body}</div>\n            <div className=\"post__user-wrapper\">\n              <div className=\"post__user\">\n                <div className=\"post__user_name\">\n                  Name:\n                  {' '}\n                  {newPost.user ? newPost.user.name : 'guest user'}\n                </div>\n                <div className=\"post__user_email\">\n                  E-mail:\n                  {' '}\n                  {newPost.user ? newPost.user.email : 'no e-mail'}\n                </div>\n              </div>\n              <div className=\"post__user_address\">\n                <div className=\"post__user_address-city\">\n                  City:\n                  {' '}\n                  {newPost.user ? newPost.user.address.city : '-'}\n                </div>\n                <div className=\"post__user_address-street\">\n                  Street:\n                  {' '}\n                  {newPost.user ? newPost.user.address.street : '-'}\n                </div>\n                <div className=\"post__user_address-zip\">\n                  Zip-code:\n                  {' '}\n                  {newPost.user ? newPost.user.address.zipcode : '-'}\n                </div>\n              </div>\n            </div>\n            {newPost.comments?.map(comment => (\n              <div key={String(comment.id)} className=\"post__comment\">\n                <span className=\"post__comment_header\">{comment.name}</span>\n                <span className=\"post__comment_title\">{comment.body}</span>\n                <span className=\"post__comment_email\">{comment.email}</span>\n              </div>\n            ))}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const LoadingSpinner = () => (\n  <div className=\"lds-spinner\">\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n","import React from 'react';\nimport { LoadingSpinner } from '../loading-spinner';\n\ntype Props = {\n  isLoading: boolean;\n  handleLoad: () => void;\n  errorMessage: string;\n};\n\nexport const Button: React.FC<Props> = ({ isLoading, handleLoad, errorMessage }) => {\n  return (\n    <>\n      {!isLoading\n        ? (\n          <button\n            className=\"main__load-button\"\n            disabled={isLoading}\n            type=\"button\"\n            onClick={handleLoad}\n          >\n            Load\n          </button>\n        )\n        : <LoadingSpinner />}\n      {errorMessage && <span className=\"error__message\">{errorMessage}</span>}\n    </>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport './App.scss';\nimport {\n  getComments, getPosts, getUsers, Post,\n} from './helpers/api';\nimport { PostList } from './helpers/postList';\nimport { Button } from './helpers/button';\n\n\nconst App = () => {\n  const [postsList, setPostList] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [query, setQuery] = useState('');\n\n  const handleLoad = async () => {\n    setIsLoading(true);\n    try {\n      const postsFromServer = await getPosts();\n      const usersFromServer = await getUsers();\n      const commentsFromServer = await getComments();\n\n      const allPosts = postsFromServer.map(newPost => ({\n        ...newPost,\n        user: usersFromServer.find(user => user.id === newPost.userId),\n        comments: commentsFromServer.filter(comment => comment.postId === newPost.id),\n      }));\n\n      setPostList(allPosts);\n      setIsLoaded(true);\n    } catch (e) {\n      setErrorMessage('Loading from server terminated. Please try again later');\n    }\n\n    setIsLoading(false);\n  };\n\n  const getSortedPostList = (list: Post[], qry: string) => (\n    list.filter((el: { title: string; body: string }) => (el.title + el.body)\n      .toLocaleLowerCase().includes(qry.toLocaleLowerCase()))\n  );\n\n  const sortedPosts = useMemo(\n    () => getSortedPostList(postsList, query),\n    [query, postsList],\n  );\n\n  return (\n    <div className=\"main\">\n      <h1 className=\"main__header\">Dynamic list of posts</h1>\n      {!isLoaded\n        ? (\n          <Button isLoading={isLoading} handleLoad={handleLoad} errorMessage={errorMessage} />\n        )\n        : (\n          <PostList setQuery={setQuery} query={query} sortedPosts={sortedPosts} />\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}