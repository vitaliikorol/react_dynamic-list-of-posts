{"version":3,"sources":["helpers/api.ts","loading-spinner.tsx","App.tsx","index.tsx"],"names":["getData","url","fetch","then","response","json","LoadingSpinner","className","App","useState","post","setPost","isLoading","setIsLoading","isLoaded","setIsLoaded","errorMessage","setErrorMessage","sortedPosts","setSortedPosts","handleLoad","a","postsFromServer","usersFromServer","commentsFromServer","allPosts","map","newPost","user","find","id","userId","comments","filter","comment","postId","type","onChange","event","el","title","body","toLocaleLowerCase","includes","target","value","sortPosts","placeholder","key","name","email","address","city","street","zipcode","String","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d7bcebc.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\nexport interface Posts {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user?: User;\n  comments?: Comment[];\n}\n\nexport interface UserAddress {\n  city: string;\n  street: string;\n  zipcode: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: UserAddress;\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  body: string;\n  email: string;\n}\n\nconst getData = <T>(url: string): Promise<T[]> => (\n  fetch(API_URL + url).then(response => response.json())\n);\n\nexport const getPosts = () => getData<Posts>('/posts.json');\nexport const getComments = () => getData<Comment>('/comments.json');\nexport const getUsers = () => getData<User>('/users.json');\n","import React from 'react';\n\nexport const LoadingSpinner = () => (\n  <div className=\"lds-spinner\">\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport {\n  getComments, getPosts, getUsers, Posts,\n} from './helpers/api';\nimport { LoadingSpinner } from './loading-spinner';\n\nconst App = () => {\n  const [post, setPost] = useState<Posts[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [sortedPosts, setSortedPosts] = useState<Posts[]>([]);\n\n  const handleLoad = async () => {\n    setIsLoading(true);\n    try {\n      const postsFromServer = await getPosts();\n      const usersFromServer = await getUsers();\n      const commentsFromServer = await getComments();\n\n      const allPosts = postsFromServer.map(newPost => ({\n        ...newPost,\n        user: usersFromServer.find(user => user.id === newPost.userId),\n        comments: commentsFromServer.filter(comment => comment.postId === newPost.id),\n      }));\n\n      setPost(allPosts);\n      setIsLoaded(true);\n      setSortedPosts(allPosts);\n    } catch (e) {\n      setErrorMessage('Loading from server terminated. Please try again later');\n    }\n\n    setIsLoading(false);\n  };\n\n  const sortPosts = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSortedPosts(post.filter(el => ((el.title + el.body)\n      .toLocaleLowerCase()\n      .includes((event.target.value)\n        .toLocaleLowerCase()))));\n  };\n\n  return (\n    <div className=\"main\">\n      <h1 className=\"main__header\">Dynamic list of posts</h1>\n      {!isLoaded ? (\n        <>\n          {!isLoading\n            ? (\n              <button className=\"main__load-button\" disabled={isLoading} type=\"button\" onClick={handleLoad}>\n                Load\n              </button>\n            )\n            : <LoadingSpinner /> }\n          {errorMessage && <span className=\"error__message\">{errorMessage}</span>}\n        </>\n      )\n        : (\n          <>\n            <input className=\"searchbar\" type=\"text\" onChange={event => sortPosts(event)} placeholder=\"Search\" />\n            <ul>\n              {sortedPosts.map(newPost => (\n                <li key={newPost.id} className=\"post\">\n                  <div className=\"post__title\">{newPost.title}</div>\n                  <div className=\"post__body\">{newPost.body}</div>\n                  <div className=\"post__user-wrapper\">\n                    <div className=\"post__user\">\n                      <div className=\"post__user_name\">\n                        Name:\n                        {' '}\n                        {newPost.user ? newPost.user.name : 'guest user'}\n                      </div>\n                      <div className=\"post__user_email\">\n                        E-mail:\n                        {' '}\n                        {newPost.user ? newPost.user.email : 'no e-mail'}\n                      </div>\n                    </div>\n                    <div className=\"post__user_address\">\n                      <div className=\"post__user_address-city\">\n                        City:\n                        {' '}\n                        {newPost.user ? newPost.user.address.city : '-'}\n                      </div>\n                      <div className=\"post__user_address-street\">\n                        Street:\n                        {' '}\n                        {newPost.user ? newPost.user.address.street : '-'}\n                      </div>\n                      <div className=\"post__user_address-zip\">\n                        Zip-code:\n                        {' '}\n                        {newPost.user ? newPost.user.address.zipcode : '-'}\n                      </div>\n                    </div>\n                  </div>\n                  {newPost.comments?.map(comment => (\n                    <div id={String(comment.id)} className=\"post__comment\">\n                      <span className=\"post__comment_header\">{comment.name}</span>\n                      <span className=\"post__comment_title\">{comment.body}</span>\n                      <span className=\"post__comment_email\">{comment.email}</span>\n                    </div>\n                  ))}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}